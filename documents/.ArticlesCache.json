[{"Hash":[210,88,10,71,216,207,124,66,114,255,173,82,210,63,127,114],"Article":"\u003ch1 id=\"motivation\"\u003emotivation\u003c/h1\u003e\n\u003cp\u003ei’ve been using \u003cem\u003edocker compose\u003c/em\u003e quite a lot lately. let’s\ncompare the docker way to the nix way, especially with \u003ca\nhref=\"https://github.com/nixcloud/nixcloud-webservices\"\u003enixcloud.webservices\u003c/a\u003e\nand \u003ca\nhref=\"https://github.com/nixcloud/nixcloud-container\"\u003enixcloud.containers\u003c/a\u003e\nin mind.\u003c/p\u003e\n\u003ch2 id=\"docker-compose\"\u003edocker compose\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"../../../posts/media/docker-compose.png\"\u003e\u003cimg src=../../../posts/media/docker-compose.png class=\"noFancy\" style=\"float: right\" alt=\"image from docker.com\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003epro:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eyaml\u003c/code\u003e based, easy to learn\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003estate management in volumes\u003c/strong\u003e, best practice\n\u003cstrong\u003eassumes container to be stateless\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etraefik\u003c/code\u003e reverse-proxy is easy to use\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.docker.com/products/docker-desktop/\"\u003edocker\ndesktop\u003c/a\u003e is so amazing during development\n\u003cul\u003e\n\u003cli\u003eclear overview over containers/volumes/images;\u003c/li\u003e\n\u003cli\u003egrouping view for \u003ccode\u003edocker compose\u003c/code\u003e deployments\u003c/li\u003e\n\u003cli\u003euseful for maintenance;\n\u003cul\u003e\n\u003cli\u003every easy to get a prompt in a running container\u003c/li\u003e\n\u003cli\u003egood tool to investigate logs\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca\nhref=\"https://docs.docker.com/storage/storagedriver/#images-and-layers\"\u003edocker\nFS layers\u003c/a\u003e a fabulous workaround for \u003ca\nhref=\"https://en.wikipedia.org/wiki/Package_manager\"\u003ePM\u003c/a\u003e shortcomings\nin reproducibility\u003c/li\u003e\n\u003cli\u003ecross platform support (linux, mac, windows)\u003c/li\u003e\n\u003cli\u003ehuge community with lots of well designed containers on \u003ca\nhref=\"https://hub.docker.com\"\nclass=\"uri\"\u003ehttps://hub.docker.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003epotential of hosting using \u003cem\u003edocker swarm\u003c/em\u003e /\n\u003cem\u003ekubernetes\u003c/em\u003e with little adaptions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003econ:\u003c/p\u003e\n\u003cp\u003ehttps://github.com/compose-spec/compose-spec/issues/94\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eno management tool\u003c/p\u003e\n\u003cp\u003eoften \u003cem\u003edocker compose\u003c/em\u003e alone is not enough:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ecommands get ridiculously long\u003c/strong\u003e; same for\n\u003cem\u003edocker\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eadditional custom scripts, like a setup, \u003cstrong\u003eresulting in\nplatform specific scripts\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003e.env\u003c/em\u003e - strange global variables concept\u003c/li\u003e\n\u003cli\u003einspecting running containers do not backtrack to the\ndocker-compose.yml on the filesystem\u003c/li\u003e\n\u003cli\u003ehard to build deployment variants with consistency (http/https+let’s\nencrypt or a different set of components)\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eincomplete APIs / unfinished concepts\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edocker: lacks support for some very basic scenarios\n\u003cul\u003e\n\u003cli\u003eaccess logs after a non-persistent container stops, see \u003ca\nhref=\"https://github.com/moby/moby/discussions/44219\"\u003emoby/discussions/44219\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eno way to access state of a container\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003edocker compose:\n\u003cul\u003e\n\u003cli\u003eno official go bindings\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eno hierarchical management\u003c/p\u003e\n\u003cp\u003esay you run 3x the same docker compose deployment a\n\u003ccode\u003edocker container ls\u003c/code\u003e will list the others\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003edebugging is hard\u003c/p\u003e\n\u003cp\u003eif container are in a restart loop one cannot get a shell accessing\nthe logs is often not possible either\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eDockerfile\u003c/code\u003e - rebuilding images burns lots of\nbandwidth and wastes download capacity, no caches\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eyaml\u003c/code\u003e - is easy but it is no programming\nlanguage\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eshared volumes \u003ccode\u003e-v ${PWD}/documents:/documents\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eUID/GID mapping of host to guest has \u003cem\u003eplatform specific\ndifferences\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003ewindows/mac blend host rights into the container but on linux files\ncreated inside the container often have root:root as owner and even\nworse, sometimes \u003cstrong\u003eu+rw g-rwx o-rwx\u003c/strong\u003e as\npermission.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eentrypoint.sh not easy overridable\u003c/p\u003e\n\u003cp\u003ethe concept of entrypoint.sh is amazing but when deriving a container\nwith a Dockerfile the process to write a correct entrypoint.sh is hard\nand might easily degrade over time. it’d be great if one could have a\nmult-stage like environment for this.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eno way to merge two docker images; however, at least one can use\nmulti-stage to copy programs from one image to another\u003c/p\u003e\n\u003cp\u003ethis means that you can’t simply use a program from \u003cstrong\u003edocker\nimage A\u003c/strong\u003e while you can \u003cstrong\u003edocker image B\u003c/strong\u003e, you can\nonly run them after each other\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"summary-on-docker-docker-compose\"\u003esummary on docker / docker\ncompose\u003c/h3\u003e\n\u003cp\u003edocker and docker compose is a really useful tool as it bridges the\nlinux development world into the lacking windows world.\u003c/p\u003e\n\u003cp\u003esits as these show that using single containers is a huge\nbenefit:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.linuxserver.io/\"\nclass=\"uri\"\u003ehttps://www.linuxserver.io/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.portainer.io/\"\nclass=\"uri\"\u003ehttps://www.portainer.io/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"nixcloud.webservices-nixcloud.container\"\u003enixcloud.webservices\n\u0026amp; nixcloud.container\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"../../../posts/media/nixos-lores.png\"\u003e\u003cimg src=../../../posts/media/nixos-lores.png class=\"noFancy\" style=\"float: right\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003epro:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://search.nixos.org/options\"\u003enixos option\nsearch\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003enixos options system is not appreciated enough. it is easy to use,\nhas good support for deprecating options, knows types and has a concept\nof hierarchical value assignments.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca\nhref=\"https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests\"\u003enixos\ntesting\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003esome of the best testing systems i’ve ever seen.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003enix uses derivations, a complete software as vim, or only a\nsimple configuration file (where docker versions FS images based on\ncommands in the Dockerfile)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLXC based, more security, more configurability but less docker\ncompatibility\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003enixcloud.TLS - this way TLS is handled outside of your\napplication\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003enixcloud.containers builds on top of LXC and not as nixos\ncontainers on systemd nspawn.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003econ:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ecomes with nixos and nix tooling\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003enix only works on linux and mac but not on windows, see [1].\u003c/p\u003e\n\u003cp\u003ewhile WSL2 on windows is great it still does not feel native. but big\nprojects will have a long way to adapt to a nix workflow which is linux\nonly where users are using conan or similar tools. third party\npackage-managers as npm/go get/cargo still don’t have drop-in support\nfor nix, see \u003ca\nhref=\"https://lastlog.de/blog/posts.html?filter=series::nix-language-atlas\"\nclass=\"uri\"\u003ehttps://lastlog.de/blog/posts.html?filter=series::nix-language-atlas\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003emany projects provide their software in a docker container,\nintegrated on various distributions. it is hard to rebuild their\npipelines on nixos instead of just using what they provide.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003edebugging systemd services is between type 2 fun and type 3 fun\n[4]. i’m a systemd fan, don’t get me wrong, still …\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"conclusion\"\u003econclusion\u003c/h1\u003e\n\u003cp\u003ethere is a small elite emerging who uses containers and this is\ngetting more and more popular. sadly these efforts however, are not\nfocused on a single concept thus loose a lot of traction.\u003c/p\u003e\n\u003cp\u003ean interesting management engine is \u003ca\nhref=\"https://www.portainer.io/\"\nclass=\"uri\"\u003ehttps://www.portainer.io/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003enowadays projects are overwhelmed with \u003cem\u003ewhat\u003c/em\u003e to support. see\nthe popular open source applications as nextcloud. a huge part of these\nproblems probably root in the tools and toolchains we use to develop\nsoftware with, which are by and large not reproducible and require lots\nof effort to get into.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003emy conclusion is: we still lack a github for hosting. to be\nmore precise, we lack a ‘git’ and a ‘hub’ - a platform which is easy to\nuse and has a vast user-base. one could argue that linux fits the later\nrole pretty well ATM.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://replit.com/\" class=\"uri\"\u003ehttps://replit.com/\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"links\"\u003elinks\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e[1] \u003ca href=\"https://discourse.nixos.org/t/nix-on-windows/1113/6\"\nclass=\"uri\"\u003ehttps://discourse.nixos.org/t/nix-on-windows/1113/6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[2] \u003ca\nhref=\"https://en.wikipedia.org/wiki/Multiple_instruction,_multiple_data\"\nclass=\"uri\"\u003ehttps://en.wikipedia.org/wiki/Multiple_instruction,_multiple_data\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[3] \u003ca\nhref=\"https://middleware.io/blog/kubernetes-challenges-and-solutions/\"\nclass=\"uri\"\u003ehttps://middleware.io/blog/kubernetes-challenges-and-solutions/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[4] \u003ca href=\"https://goeast.ems.com/three-types-of-fun/\"\nclass=\"uri\"\u003ehttps://goeast.ems.com/three-types-of-fun/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"}]
